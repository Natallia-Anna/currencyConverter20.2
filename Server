import com.sun.net.httpserver.HttpServer; // –°–µ—Ä–≤–µ—Ä–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å HTTP-—Å–µ—Ä–≤–µ—Ä –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import com.sun.net.httpserver.HttpHandler; // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import com.sun.net.httpserver.HttpExchange; // –û–±—ä–µ–∫—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π HTTP-–∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
import java.io.*; // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞: InputStream, OutputStream, BufferedReader, File
import java.net.InetSocketAddress; // –†–∞–±–æ—Ç–∞ —Å —Å–µ—Ç—å—é –∏ HTTP-–∑–∞–ø—Ä–æ—Å–∞–º–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞–¥—Ä–µ—Å (IP + –ø–æ—Ä—Ç)
import java.net.HttpURLConnection; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, GET/POST)
import java.net.URL; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–µ–±-–∞–¥—Ä–µ—Å
import java.nio.charset.StandardCharsets; // –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏, StandardCharsets.UTF_8
import java.util.*; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å—ã –∏–∑ –ø–∞–∫–µ—Ç–∞ java.util:List, Map, ArrayList, HashMap, Scanner, Collections
import org.json.JSONObject; // –í–Ω–µ—à–Ω–∏–π –∫–ª–∞—Å—Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ org.json –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-–æ–±—ä–µ–∫—Ç–æ–≤

public class Server {
    private static final int PORT = 8080;
    private static final String API_KEY = "bd8a4ddcd6b838addc3b6d52"; // –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ exchangerate-api.com
    private static final String BASE_CURRENCY = "USD";
    private static Map<String, Double> exchangeRates = new HashMap<>(); // —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ö—Ä–∞–Ω–∏—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç

    public static void main(String[] args) throws IOException {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        updateExchangeRates();

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                updateExchangeRates();
            }
        }, 0, 30 * 60 * 1000);

        HttpServer server = HttpServer.create(new InetSocketAddress(PORT), 0);
        server.createContext("/convert", new ConversionHandler());
        server.createContext("/currencies", new CurrenciesHandler());
        server.createContext("/manual-convert", new ManualConversionHandler()); // <--- –Ω–æ–≤—ã–π –ø—É—Ç—å
        server.setExecutor(null);
        server.start();
        System.out.println("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É " + PORT);
    }

    private static void updateExchangeRates() {
        try {
            URL url = new URL("https://v6.exchangerate-api.com/v6/" + API_KEY + "/latest/" + BASE_CURRENCY);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            JSONObject jsonResponse = new JSONObject(response.toString());
            JSONObject rates = jsonResponse.getJSONObject("conversion_rates");

            synchronized (exchangeRates) {
                exchangeRates.clear();
                for (String currency : rates.keySet()) {
                    exchangeRates.put(currency, rates.getDouble(currency));
                }
            }

            System.out.println("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã: " + new Date());
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: " + e.getMessage());
        }
    }

    static class CurrenciesHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if (!"GET".equals(exchange.getRequestMethod())) {
                sendResponse(exchange, 405, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
                return;
            }

            try {
                List<String> currencies = new ArrayList<>(exchangeRates.keySet());
                Collections.sort(currencies);
                String response = String.join(",", currencies);
                sendResponse(exchange, 200, response);
            } catch (Exception e) {
                sendResponse(exchange, 500, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }
    }

    static class ConversionHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if (!"POST".equals(exchange.getRequestMethod())) {
                sendResponse(exchange, 405, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
                return;
            }

            try {
                InputStream requestBody = exchange.getRequestBody();
                String requestData = new String(requestBody.readAllBytes(), StandardCharsets.UTF_8);
                Map<String, String> params = parseFormData(requestData);

                String amountStr = params.get("amount");
                String fromCurrency = params.get("from");
                String toCurrency = params.get("to");

                if (amountStr == null || amountStr.isEmpty() || fromCurrency == null || toCurrency == null) {
                    sendResponse(exchange, 400, "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                    return;
                }

                double amount = Double.parseDouble(amountStr);
                double fromRate, toRate;

                synchronized (exchangeRates) {
                    fromRate = exchangeRates.getOrDefault(fromCurrency, -1.0);
                    toRate = exchangeRates.getOrDefault(toCurrency, -1.0);
                }

                if (fromRate == -1 || toRate == -1) {
                    sendResponse(exchange, 400, "–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞");
                    return;
                }

                double result = amount * (toRate / fromRate);
                System.out.printf("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: %.2f %s = %.2f %s%n", amount, fromCurrency, result, toCurrency);

                String response = String.format("%.2f", result);
                sendResponse(exchange, 200, response);
            } catch (NumberFormatException e) {
                sendResponse(exchange, 400, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞");
            } catch (Exception e) {
                sendResponse(exchange, 500, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        private Map<String, String> parseFormData(String formData) {
            Map<String, String> params = new HashMap<>();
            String[] pairs = formData.split("&");
            for (String pair : pairs) {
                String[] keyValue = pair.split("=");
                if (keyValue.length == 2) {
                    params.put(keyValue[0], keyValue[1]);
                }
            }
            return params;
        }
    }

    // üí° –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    static class ManualConversionHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if (!"POST".equals(exchange.getRequestMethod())) {
                sendResponse(exchange, 405, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
                return;
            }

            try {
                InputStream requestBody = exchange.getRequestBody();
                String requestData = new String(requestBody.readAllBytes(), StandardCharsets.UTF_8);
                Map<String, String> params = parseFormData(requestData);

                String amountStr = params.get("amount");
                String rateStr = params.get("rate");

                if (amountStr == null || rateStr == null) {
                    sendResponse(exchange, 400, "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                    return;
                }

                double amount = Double.parseDouble(amountStr);
                double rate = Double.parseDouble(rateStr);

                double result = amount * rate;
                String response = String.format("%.2f * %.4f = %.2f", amount, rate, result);

                System.out.println("–†—É—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: " + response);
                sendResponse(exchange, 200, response);
            } catch (NumberFormatException e) {
                sendResponse(exchange, 400, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞");
            } catch (Exception e) {
                sendResponse(exchange, 500, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        private Map<String, String> parseFormData(String formData) {
            Map<String, String> params = new HashMap<>();
            String[] pairs = formData.split("&");
            for (String pair : pairs) {
                String[] keyValue = pair.split("=");
                if (keyValue.length == 2) {
                    params.put(keyValue[0], keyValue[1]);
                }
            }
            return params;
        }
    }

    private static void sendResponse(HttpExchange exchange, int statusCode, String response) throws IOException {
        exchange.getResponseHeaders().set("Content-Type", "text/plain; charset=UTF-8");
        exchange.sendResponseHeaders(statusCode, response.getBytes(StandardCharsets.UTF_8).length);
        OutputStream os = exchange.getResponseBody();
        os.write(response.getBytes(StandardCharsets.UTF_8));
        os.close();
    }
}
